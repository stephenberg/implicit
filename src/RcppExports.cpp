// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dst1
Eigen::MatrixXd dst1(Eigen::MatrixXd U);
RcppExport SEXP _implicit_dst1(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(dst1(U));
    return rcpp_result_gen;
END_RCPP
}
// invert
Eigen::VectorXd invert(int rows, int cols, Eigen::VectorXd& mu, Eigen::VectorXd& x, Eigen::VectorXd& b, int diffusionType, int nIter, double tol, double lengthX, double lengthY, int preconditionerType, bool dirichlet, bool debug);
RcppExport SEXP _implicit_invert(SEXP rowsSEXP, SEXP colsSEXP, SEXP muSEXP, SEXP xSEXP, SEXP bSEXP, SEXP diffusionTypeSEXP, SEXP nIterSEXP, SEXP tolSEXP, SEXP lengthXSEXP, SEXP lengthYSEXP, SEXP preconditionerTypeSEXP, SEXP dirichletSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type diffusionType(diffusionTypeSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type lengthX(lengthXSEXP);
    Rcpp::traits::input_parameter< double >::type lengthY(lengthYSEXP);
    Rcpp::traits::input_parameter< int >::type preconditionerType(preconditionerTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(invert(rows, cols, mu, x, b, diffusionType, nIter, tol, lengthX, lengthY, preconditionerType, dirichlet, debug));
    return rcpp_result_gen;
END_RCPP
}
// invert_Irregular
Eigen::VectorXd invert_Irregular(int rows, int cols, Eigen::VectorXd& mu, Eigen::VectorXd& x, Eigen::VectorXd& b, int diffusionType, double tol, int nIter, Eigen::VectorXi& internalPoints, bool dirichlet, double lengthX, double lengthY, int preconditionerType, bool debug);
RcppExport SEXP _implicit_invert_Irregular(SEXP rowsSEXP, SEXP colsSEXP, SEXP muSEXP, SEXP xSEXP, SEXP bSEXP, SEXP diffusionTypeSEXP, SEXP tolSEXP, SEXP nIterSEXP, SEXP internalPointsSEXP, SEXP dirichletSEXP, SEXP lengthXSEXP, SEXP lengthYSEXP, SEXP preconditionerTypeSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type diffusionType(diffusionTypeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type internalPoints(internalPointsSEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< double >::type lengthX(lengthXSEXP);
    Rcpp::traits::input_parameter< double >::type lengthY(lengthYSEXP);
    Rcpp::traits::input_parameter< int >::type preconditionerType(preconditionerTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(invert_Irregular(rows, cols, mu, x, b, diffusionType, tol, nIter, internalPoints, dirichlet, lengthX, lengthY, preconditionerType, debug));
    return rcpp_result_gen;
END_RCPP
}
// fick_L_f
Eigen::VectorXd fick_L_f(Eigen::VectorXd& mu_, Eigen::VectorXd& f_, int rows, int cols, bool dirichlet, double lengthX, double lengthY);
RcppExport SEXP _implicit_fick_L_f(SEXP mu_SEXP, SEXP f_SEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP dirichletSEXP, SEXP lengthXSEXP, SEXP lengthYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< double >::type lengthX(lengthXSEXP);
    Rcpp::traits::input_parameter< double >::type lengthY(lengthYSEXP);
    rcpp_result_gen = Rcpp::wrap(fick_L_f(mu_, f_, rows, cols, dirichlet, lengthX, lengthY));
    return rcpp_result_gen;
END_RCPP
}
// homogeneous_L_f
Eigen::VectorXd homogeneous_L_f(Eigen::VectorXd& f_, int rows, int cols, bool dirichlet, double lengthX, double lengthY);
RcppExport SEXP _implicit_homogeneous_L_f(SEXP f_SEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP dirichletSEXP, SEXP lengthXSEXP, SEXP lengthYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< double >::type lengthX(lengthXSEXP);
    Rcpp::traits::input_parameter< double >::type lengthY(lengthYSEXP);
    rcpp_result_gen = Rcpp::wrap(homogeneous_L_f(f_, rows, cols, dirichlet, lengthX, lengthY));
    return rcpp_result_gen;
END_RCPP
}
// general_Homogeneous_Lf
Eigen::VectorXd general_Homogeneous_Lf(Eigen::VectorXd& f_, int rows, int cols, Eigen::VectorXi& internalPoints_, bool dirichlet, double lengthX, double lengthY);
RcppExport SEXP _implicit_general_Homogeneous_Lf(SEXP f_SEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP internalPoints_SEXP, SEXP dirichletSEXP, SEXP lengthXSEXP, SEXP lengthYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type internalPoints_(internalPoints_SEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< double >::type lengthX(lengthXSEXP);
    Rcpp::traits::input_parameter< double >::type lengthY(lengthYSEXP);
    rcpp_result_gen = Rcpp::wrap(general_Homogeneous_Lf(f_, rows, cols, internalPoints_, dirichlet, lengthX, lengthY));
    return rcpp_result_gen;
END_RCPP
}
// general_Fick_Lf
Eigen::VectorXd general_Fick_Lf(Eigen::VectorXd& mu_, Eigen::VectorXd& f_, int rows, int cols, Eigen::VectorXi& internalPoints_, bool dirichlet, double lengthX, double lengthY);
RcppExport SEXP _implicit_general_Fick_Lf(SEXP mu_SEXP, SEXP f_SEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP internalPoints_SEXP, SEXP dirichletSEXP, SEXP lengthXSEXP, SEXP lengthYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< int >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< int >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type internalPoints_(internalPoints_SEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< double >::type lengthX(lengthXSEXP);
    Rcpp::traits::input_parameter< double >::type lengthY(lengthYSEXP);
    rcpp_result_gen = Rcpp::wrap(general_Fick_Lf(mu_, f_, rows, cols, internalPoints_, dirichlet, lengthX, lengthY));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_implicit_dst1", (DL_FUNC) &_implicit_dst1, 1},
    {"_implicit_invert", (DL_FUNC) &_implicit_invert, 13},
    {"_implicit_invert_Irregular", (DL_FUNC) &_implicit_invert_Irregular, 14},
    {"_implicit_fick_L_f", (DL_FUNC) &_implicit_fick_L_f, 7},
    {"_implicit_homogeneous_L_f", (DL_FUNC) &_implicit_homogeneous_L_f, 6},
    {"_implicit_general_Homogeneous_Lf", (DL_FUNC) &_implicit_general_Homogeneous_Lf, 7},
    {"_implicit_general_Fick_Lf", (DL_FUNC) &_implicit_general_Fick_Lf, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_implicit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
