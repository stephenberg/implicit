[
    {
        "file": "E:/implicit/inst/include/fftw3.h",
        "file_last_write": 1596133841.0,
        "definitions": []
    },
    {
        "file": "E:/implicit/src/convenienceFunctions.h",
        "file_last_write": 1596223375.0,
        "definitions": [
            {
                "usr": "c:@F@logit#d#",
                "kind": 6,
                "parent_name": "",
                "name": "logit(double)",
                "file": "E:/implicit/src/convenienceFunctions.h",
                "line": 6,
                "column": 15
            },
            {
                "usr": "c:@F@expit#d#",
                "kind": 6,
                "parent_name": "",
                "name": "expit(double)",
                "file": "E:/implicit/src/convenienceFunctions.h",
                "line": 10,
                "column": 15
            }
        ]
    },
    {
        "file": "E:/implicit/src/dst1.cpp",
        "file_last_write": 1596223375.0,
        "definitions": [
            {
                "usr": "c:@F@dst1#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#",
                "kind": 6,
                "parent_name": "",
                "name": "dst1(Eigen::MatrixXd)",
                "file": "E:/implicit/src/dst1.cpp",
                "line": 8,
                "column": 17
            },
            {
                "usr": "c:@F@main#",
                "kind": 6,
                "parent_name": "",
                "name": "main",
                "file": "E:/implicit/src/dst1.cpp",
                "line": 21,
                "column": 5
            }
        ]
    },
    {
        "file": "E:/implicit/src/fftPlan.h",
        "file_last_write": 1596223375.0,
        "definitions": [
            {
                "usr": "c:@S@fftPlan",
                "kind": 2,
                "parent_name": "",
                "name": "fftPlan",
                "file": "E:/implicit/src/fftPlan.h",
                "line": 14,
                "column": 7
            },
            {
                "usr": "c:@S@fftPlan@F@dst_1#",
                "kind": 7,
                "parent_name": "fftPlan",
                "name": "dst_1",
                "file": "E:/implicit/src/fftPlan.h",
                "line": 55,
                "column": 8
            },
            {
                "usr": "c:@S@fftPlan@F@dst_1_reverse#",
                "kind": 7,
                "parent_name": "fftPlan",
                "name": "dst_1_reverse",
                "file": "E:/implicit/src/fftPlan.h",
                "line": 61,
                "column": 8
            },
            {
                "usr": "c:@S@fftPlan@F@multiplyBy_I_A_inverse#d#d#d#",
                "kind": 7,
                "parent_name": "fftPlan",
                "name": "multiplyBy_I_A_inverse(double, double, double)",
                "file": "E:/implicit/src/fftPlan.h",
                "line": 67,
                "column": 8
            },
            {
                "usr": "c:@S@fftPlan@F@multiplyBy_pow_neg_A#d#d#d#",
                "kind": 7,
                "parent_name": "fftPlan",
                "name": "multiplyBy_pow_neg_A(double, double, double)",
                "file": "E:/implicit/src/fftPlan.h",
                "line": 88,
                "column": 8
            },
            {
                "usr": "c:@S@fftPlan@F@laplacianEigenvalue#I#I#I#I#d#d#",
                "kind": 7,
                "parent_name": "fftPlan",
                "name": "laplacianEigenvalue(int, int, int, int, double, double)",
                "file": "E:/implicit/src/fftPlan.h",
                "line": 109,
                "column": 17
            }
        ]
    },
    {
        "file": "E:/implicit/src/inversionFunctions.h",
        "file_last_write": 1596223375.0,
        "definitions": [
            {
                "usr": "c:@F@fixBoundary#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#&$@N@Eigen@S@Matrix>#I#VI-1#VI1#VI0#VI-1#VI1#",
                "kind": 6,
                "parent_name": "",
                "name": "fixBoundary(Eigen::VectorXd, Eigen::VectorXi &)",
                "file": "E:/implicit/src/inversionFunctions.h",
                "line": 12,
                "column": 17
            },
            {
                "usr": "c:@F@invert#I#I#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#S0_#I#I#d#d#d#I#b#b#",
                "kind": 6,
                "parent_name": "",
                "name": "invert(int, int, Eigen::VectorXd &, Eigen::VectorXd &, Eigen::VectorXd &, int, int, double, double, double, int, bool, bool)",
                "file": "E:/implicit/src/inversionFunctions.h",
                "line": 26,
                "column": 17
            },
            {
                "usr": "c:@F@invert_Irregular#I#I#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#S0_#I#d#I#&$@N@Eigen@S@Matrix>#I#VI-1#VI1#VI0#VI-1#VI1#b#d#d#I#b#",
                "kind": 6,
                "parent_name": "",
                "name": "invert_Irregular(int, int, Eigen::VectorXd &, Eigen::VectorXd &, Eigen::VectorXd &, int, double, int, Eigen::VectorXi &, bool, double, double, int, bool)",
                "file": "E:/implicit/src/inversionFunctions.h",
                "line": 135,
                "column": 17
            }
        ]
    },
    {
        "file": "E:/implicit/src/kf_diffusion.h",
        "file_last_write": 1596223380.0,
        "definitions": [
            {
                "usr": "c:@S@KF_diffusion",
                "kind": 2,
                "parent_name": "",
                "name": "KF_diffusion",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 11,
                "column": 7
            },
            {
                "usr": "c:@S@KF_diffusion@F@setInitialConditions#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "setInitialConditions",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 290,
                "column": 8
            },
            {
                "usr": "c:@S@KF_diffusion@F@computeDiffusion#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "computeDiffusion(int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 307,
                "column": 8
            },
            {
                "usr": "c:@S@KF_diffusion@F@logLikelihood#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "logLikelihood",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 331,
                "column": 10
            },
            {
                "usr": "c:@S@KF_diffusion@F@du_dmu#I#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "du_dmu(int, int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 356,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@du_dgamma#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "du_dgamma(int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 410,
                "column": 25
            },
            {
                "usr": "c:@S@KF_diffusion@F@du_dlongLat#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "du_dlongLat(int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 450,
                "column": 25
            },
            {
                "usr": "c:@S@KF_diffusion@F@du_dsigma#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "du_dsigma(int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 505,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@du_dkappa#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "du_dkappa(int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 553,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@dl_dEta#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "dl_dEta",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 601,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@dl_du#&$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "dl_du(Eigen::MatrixXd &)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 626,
                "column": 10
            },
            {
                "usr": "c:@S@KF_diffusion@F@padDiffusion#&$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "padDiffusion(Eigen::MatrixXd &)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 654,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@differentiateLogLikelihood#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "differentiateLogLikelihood",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 677,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@get_u#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "get_u",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 728,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@time_i_covariate#&$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#I#I#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "time_i_covariate(Eigen::MatrixXd &, int, int)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 732,
                "column": 17
            },
            {
                "usr": "c:@S@KF_diffusion@F@drhs_dut_1#&$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#$@N@Eigen@S@Map>#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#VI0#$@N@Eigen@S@Stride>#VI0#VI0#I#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "drhs_dut_1(Eigen::MatrixXd &, Map<Eigen::VectorXd>, int)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 738,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@laplacianMultiply#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "laplacianMultiply(Eigen::VectorXd &, Eigen::VectorXd &)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 747,
                "column": 12
            },
            {
                "usr": "c:@S@KF_diffusion@F@solver#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#S0_#I#d#",
                "kind": 7,
                "parent_name": "KF_diffusion",
                "name": "solver(Eigen::VectorXd &, Eigen::VectorXd &, Eigen::VectorXd &, int, double)",
                "file": "E:/implicit/src/kf_diffusion.h",
                "line": 757,
                "column": 12
            }
        ]
    },
    {
        "file": "E:/implicit/src/modelFitting.cpp",
        "file_last_write": 1596153032.0,
        "definitions": [
            {
                "usr": "c:@F@computeDiffusion#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "computeDiffusion(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::MatrixXd, Eigen::MatrixXd, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 4,
                "column": 17
            },
            {
                "usr": "c:@F@du_dmu#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "du_dmu(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::MatrixXd, Eigen::MatrixXd, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 46,
                "column": 17
            },
            {
                "usr": "c:@F@du_dkappa#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "du_dkappa(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::MatrixXd, Eigen::MatrixXd, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 89,
                "column": 17
            },
            {
                "usr": "c:@F@du_dsigma#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "du_dsigma(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::MatrixXd, Eigen::MatrixXd, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 132,
                "column": 17
            },
            {
                "usr": "c:@F@du_dgamma#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "du_dgamma(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::MatrixXd, Eigen::MatrixXd, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 175,
                "column": 30
            },
            {
                "usr": "c:@F@du_dlongLat#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "du_dlongLat(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::MatrixXd, Eigen::MatrixXd, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 219,
                "column": 30
            },
            {
                "usr": "c:@F@dl_dtheta#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#S0_#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#S1_#$@N@Eigen@S@Matrix>#I#VI-1#VI1#VI0#VI-1#VI1#S2_#S2_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "dl_dtheta(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::VectorXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXi, Eigen::VectorXi, Eigen::VectorXi, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 263,
                "column": 17
            },
            {
                "usr": "c:@F@loglikelihood#d#$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#d#d#S0_#$@N@Eigen@S@Matrix>#d#VI-1#VI-1#VI0#VI-1#VI-1#S1_#S1_#$@N@Eigen@S@Matrix>#I#VI-1#VI1#VI0#VI-1#VI1#S2_#S2_#I#I#I#I#b#d#d#b#",
                "kind": 6,
                "parent_name": "",
                "name": "loglikelihood(double, Eigen::VectorXd, Eigen::VectorXd, double, double, Eigen::VectorXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXi, Eigen::VectorXi, Eigen::VectorXi, int, int, int, int, bool, double, double, bool)",
                "file": "E:/implicit/src/modelFitting.cpp",
                "line": 306,
                "column": 8
            }
        ]
    },
    {
        "file": "E:/implicit/src/multiplyByLaplacian.h",
        "file_last_write": 1596223375.0,
        "definitions": [
            {
                "usr": "c:@F@fick_L_f#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#I#I#b#d#d#",
                "kind": 6,
                "parent_name": "",
                "name": "fick_L_f(Eigen::VectorXd &, Eigen::VectorXd &, int, int, bool, double, double)",
                "file": "E:/implicit/src/multiplyByLaplacian.h",
                "line": 24,
                "column": 17
            },
            {
                "usr": "c:@F@homogeneous_L_f#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#I#I#b#d#d#",
                "kind": 6,
                "parent_name": "",
                "name": "homogeneous_L_f(Eigen::VectorXd &, int, int, bool, double, double)",
                "file": "E:/implicit/src/multiplyByLaplacian.h",
                "line": 111,
                "column": 17
            },
            {
                "usr": "c:@F@general_Homogeneous_Lf#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#I#I#&$@N@Eigen@S@Matrix>#I#VI-1#VI1#VI0#VI-1#VI1#b#d#d#",
                "kind": 6,
                "parent_name": "",
                "name": "general_Homogeneous_Lf(Eigen::VectorXd &, int, int, Eigen::VectorXi &, bool, double, double)",
                "file": "E:/implicit/src/multiplyByLaplacian.h",
                "line": 172,
                "column": 17
            },
            {
                "usr": "c:@F@general_Fick_Lf#&$@N@Eigen@S@Matrix>#d#VI-1#VI1#VI0#VI-1#VI1#S0_#I#I#&$@N@Eigen@S@Matrix>#I#VI-1#VI1#VI0#VI-1#VI1#b#d#d#",
                "kind": 6,
                "parent_name": "",
                "name": "general_Fick_Lf(Eigen::VectorXd &, Eigen::VectorXd &, int, int, Eigen::VectorXi &, bool, double, double)",
                "file": "E:/implicit/src/multiplyByLaplacian.h",
                "line": 269,
                "column": 17
            }
        ]
    }
]