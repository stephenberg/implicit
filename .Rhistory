coords,
A,
20,
TRUE,
y,
yIndices,
tol,
"simple",
TRUE)
t1=logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices)
t0
t1
t0=gradFunc(params,
X_intercept,
coords,
A,
20,
TRUE,
y,
yIndices,
tol,
"simple",
TRUE)
t1=logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices)
microbenchmark::microbenchmark(logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices),times=20)
microbenchmark::microbenchmark(gradFunc(params,
X_intercept,
coords,
A,
20,
TRUE,
y,
yIndices,
tol,
"simple",
TRUE),times=20)
library(implicit)
microbenchmark::microbenchmark(gradFunc(params,
X_intercept,
coords,
A,
20,
TRUE,
y,
yIndices,
tol,
"simple",
TRUE),times=20)
microbenchmark::microbenchmark(gradFunc(params,
X_intercept,
coords,
A,
20,
TRUE,
y,
yIndices,
tol,
"simple",
TRUE),times=20)
microbenchmark::microbenchmark(logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices),times=20)
microbenchmark::microbenchmark(logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices),times=20)
res_ad=optim(params,ll_wrapper,ll_deriv,
X_intercept,
coords,
neighborMatrix,
steps,
tol,
y,
yIndices,
method="BFGS",
control=list(fnscale=-1))
res_ad
res_ad
source('C:/Dropbox/CWD/cwdCode/R/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/cwdCode/R/kfAnalysis.R', echo=TRUE)
params1=res_ad$par
logLikelihood(params1,
X_intercept,
coords,
neighborMatrix,
steps,
KF,
y,
yIndices,
tol,
"simple",
TRUE)
t1=logLikelihood_ad(params1,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices)
t1
t1$logLike
t1$diffusion
anyNA(t1$diffusion)
anyNA.numeric_version(t1$diffusion)
library(implicit)
res_ad=optim(params,ll_wrapper,ll_deriv,
X_intercept,
coords,
neighborMatrix,
steps,
tol,
y,
yIndices,
method="BFGS",
control=list(fnscale=-1))
res_io_KF=optim(par=params,fn=logLikelihood,gr=gradFunc,
X_intercept,
coords,
neighborMatrix,
steps,
KF,
y,
yIndices,
tol,
"simple",
TRUE,
method="BFGS",control=list(fnscale=-1,
trace=1,
REPORT=1,
reltol=10^-16,
maxit=200))
res_ad=optim(params,ll_wrapper,ll_deriv,
X_intercept,
coords,
neighborMatrix,
steps,
tol,
y,
yIndices,
method="BFGS",
control=list(fnscale=-1))
res_io_KF=optim(par=params,fn=logLikelihood,gr=gradFunc,
X_intercept,
coords,
neighborMatrix,
steps,
KF,
y,
yIndices,
tol,
"simple",
TRUE,
method="BFGS",control=list(fnscale=-1,
trace=1,
REPORT=1,
reltol=10^-16,
maxit=200))
params=c(-5,-5,c(-91,44.,log(2),log(10)))
X_intercept=X[,1,drop=FALSE]
KF=TRUE
steps=20
tol=10^-6
coords=coordinates(longLats)
neighborMatrix=A
# Rcpp::List logLikelihood_ad(Eigen::VectorXd params,
#                             Eigen::MatrixXd X,
#                             Eigen::MatrixXd initCov,
#                             Eigen::SparseMatrix<double> neighborMatrix,
#                             int timeSteps,
#                             double tol,
#                             Eigen::VectorXi y,
#                             Eigen::VectorXi yIndices){
val=logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices)
ll_wrapper<-function(params,
X_intercept,
coords,
A,
timeSteps,
tol,
y,
yIndices){
val=logLikelihood_ad(params,
X_intercept,
coords,
A,
timeSteps,
tol,
y,
yIndices)
print(val$logLike)
return(val$logLike)
}
ll_deriv<-function(params,
X_intercept,
coords,
A,
steps,
tol,
y,
yIndices){
val=logLikelihood_ad(params,
X_intercept,
coords,
A,
20,
10^-6,
y,
yIndices)
print(val$derivative)
print(params)
return(val$derivative)
}
logLikelihood(params,
X_intercept,
coords,
neighborMatrix,
steps,
KF,
y,
yIndices,
tol,
"simple",
TRUE)
gradFunc<-function(params,X,X_spline,neighborMatrix,steps,KF,y,yIndices,tol,method="simple",kernel){
val=numDeriv::grad(func=logLikelihood,params,method=method,side=NULL,method.args=list(eps=10^-4),X,X_spline,neighborMatrix,steps,KF,y,yIndices,tol,method,kernel)
return(val)
}
t0=gradFunc(params,
X_intercept,
coords,
A,
20,
TRUE,
y,
yIndices,
tol,
"simple",
TRUE)
t1=logLikelihood_ad(params1,
X_intercept,
coords,
A,
20,
10^-10,
y,
yIndices)
t0
t1$derivative
t1$logLike
sum(t1$test)
res_ad=optim(params,ll_wrapper,ll_deriv,
X_intercept,
coords,
neighborMatrix,
steps,
tol,
y,
yIndices,
method="BFGS",
control=list(fnscale=-1))
params1=res_ad$par
logLikelihood(params1,
X_intercept,
coords,
neighborMatrix,
steps,
KF,
y,
yIndices,
tol,
"simple",
TRUE)
res_io_KF=optim(par=params,fn=logLikelihood,gr=gradFunc,
X_intercept,
coords,
neighborMatrix,
steps,
KF,
y,
yIndices,
tol,
"simple",
TRUE,
method="BFGS",control=list(fnscale=-1,
trace=1,
REPORT=1,
reltol=10^-16,
maxit=200))
qnorm(0.95,mean=1,sd=1/8)
0.38/(0.25/22)^0.5
0.38/0.1066
pnorm(3.564728)
1-pnorm(3.564728)
2*(1-pnorm(3.564728))
library(implicit)
library(implicit)
devtools::build()
source('C:/Dropbox/CWD/cwdCode/R/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/cwdCode/R/kfAnalysis.R', echo=TRUE)
getwed()
getwd()
setwd("C:/Dropbox/CWD/implicit/Example_fit")
load("analysisCovariates.RData")
source("kolmogorov.R")
library(sp)
library(ggplot2)
params=c(-4,-4,c(-90,43.,log(2),log(10)))
X_intercept=X[,1,drop=FALSE]
KF=TRUE
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
source('C:/Dropbox/CWD/implicit/Example_fit/kfAnalysis.R', echo=TRUE)
help(fit_bcd)
library(bcd)
help(fit_bcd)
data(exampleData)
#Linear regression
fit_linear=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression
fit_logistic=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multinomial regression
fit_multinomial=fit_bcd(X=X,y=as.factor(y_multinomial),family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multiresponse linear regression
fit_multiresponse=fit_bcd(X=X,y=y_multiresponse,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Poisson regression
fit_poisson=fit_bcd(X=X,y=y_count,family="poisson",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression with overlapping groups and implicit duplication of design matrix columns
grouping=list(as.integer(1),2:10,11:30,11:50)
fit_overlap=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Fitting a sparse group lasso model via the overlapping group lasso:
#below, the group and l1 penalties given equal weights alpha=0.5
grouping=c(list(as.integer(1),2:10,11:30,11:50),as.list(2:50))
penaltyFactor=c(0,rep(0.5,3),rep(0.5,49))
#fitting is slow unless a relaxed optimization tolerance is used
fit_sgl=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor,tol=10^-5)
data(exampleData)
#Linear regression
fit_linear=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression
fit_logistic=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multinomial regression
fit_multinomial=fit_bcd(X=X,y=as.factor(y_multinomial),family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multiresponse linear regression
fit_multiresponse=fit_bcd(X=X,y=y_multiresponse,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Poisson regression
fit_poisson=fit_bcd(X=X,y=y_count,family="poisson",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression with overlapping groups and implicit duplication of design matrix columns
grouping=list(as.integer(1),2:10,11:30,11:50)
fit_overlap=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Fitting a sparse group lasso model via the overlapping group lasso:
#below, the group and l1 penalties given equal weights alpha=0.5
grouping=c(list(as.integer(1),2:10,11:30,11:50),as.list(2:50))
penaltyFactor=c(0,rep(0.5,3),rep(0.5,49))
#fitting is slow unless a relaxed optimization tolerance is used
fit_sgl=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor,tol=10^-5)
devtools::install_git("https://github.com/stephenberg/implicit")
devtools::install_git("https://github.com/stephenberg/implicit")
devtools::install_git("https://github.com/stephenberg/implicit")
devtools::install_git("https://github.com/stephenberg/implicit")
devtools::document()
devtools::document()
devtools::document()
library(implicit)
devtools::install_git("https://github.com/stephenberg/implicit")
help(bcd)
library(bcd)
help("fit_bcd")
data(exampleData)
#Linear regression
fit_linear=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression
fit_logistic=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multinomial regression
fit_multinomial=fit_bcd(X=X,y=as.factor(y_multinomial),family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multiresponse linear regression
fit_multiresponse=fit_bcd(X=X,y=y_multiresponse,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Poisson regression
fit_poisson=fit_bcd(X=X,y=y_count,family="poisson",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression with overlapping groups and implicit duplication of design matrix columns
grouping=list(as.integer(1),2:10,11:30,11:50)
fit_overlap=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Fitting a sparse group lasso model via the overlapping group lasso:
#below, the group and l1 penalties given equal weights alpha=0.5
grouping=c(list(as.integer(1),2:10,11:30,11:50),as.list(2:50))
penaltyFactor=c(0,rep(0.5,3),rep(0.5,49))
#fitting is slow unless a relaxed optimization tolerance is used
fit_sgl=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor,tol=10^-5)
library(dlstats)
dlstats::cran_stats("automultinomial")
dlstats::cran_stats("glmnet")
dlstats::cran_stats("personalized")
dlstats::cran_stats("automultinomial")
v1=dlstats::cran_stats("automultinomial")
v2=dlstats::cran_stats("personalized")
v1
v2
v1
v1
v2
v1[30:37]
v1[30:36,]
v2[22:29]
v2[22:29,]
v2[21:28,]
v1[30:36,]
v2[21:28,]
v1[30:36,]
v2[22:28,]
v2=dlstats::cran_stats("personalized")
dlstats::cran_stats("personalized")
dlstats::cran_stats("automultinomial")
install.packages("adjustedcranlogs")
library(adjustedcranlogs)
adj_cran_downloads("automultinomial")
adj_cran_downloads("automultinomial",when = "last-month")
help("adj_cran_downloads")
adj_cran_downloads("automultinomial",when = "last-month")
adj_cran_downloads("personalized",when = "last-month")
adj_cran_downloads("automultinomial",when = "last-month")
adj_cran_downloads("automultinomial",when = "last-month")
adj_cran_downloads("personalized",when = "last-month")
adj_cran_downloads("personalized",when = "last-month")
adj_cran_downloads("personalized",when = "last-month",nnumbercomparison = 1000)
adj_cran_downloads("personalized",when = "last-month",numbercomparison = 1000)
adj_cran_downloads("personalized",when = "last-month",numbercomparison = 500)
library(automultinomial)
install.packages("automultinomial")
library(automultinomial)
MPLE()
help("MPLE")
##########generating coefficient values and data
A=igraph::get.adjacency(igraph::make_lattice(c(40,40))) #adjacency matrix A
X=cbind(rep(1,1600),matrix(rnorm(1600*4),ncol=4)) #design matrix
gamma=0.6 #correlation parameter
beta=matrix(rnorm(5)*0.3,ncol=1) #covariate parameters
y=drawSamples(beta,gamma,X,A,burnIn=10,nSamples=1)
##########fitting model
fit=MPLE(X = X,y=factor(y),A = A,ciLevel = 0.99,method = "asymptotic")
MPLE_summary(fit)
t1=MPLE_summary(fit)
t1$ciTable
library(bcd)
help("fit_bcd")
data(exampleData)
#Linear regression
fit_linear=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression
fit_logistic=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multinomial regression
fit_multinomial=fit_bcd(X=X,y=as.factor(y_multinomial),family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Multiresponse linear regression
fit_multiresponse=fit_bcd(X=X,y=y_multiresponse,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor)
#Poisson regression
fit_poisson=fit_bcd(X=X,y=y_count,family="poisson",groups=grouping,penaltyFactor=penaltyFactor)
#Logistic regression with overlapping groups and implicit duplication of design matrix columns
grouping=list(as.integer(1),2:10,11:30,11:50)
fit_overlap=fit_bcd(X=X,y=y_binary,family="logistic",groups=grouping,penaltyFactor=penaltyFactor)
#Fitting a sparse group lasso model via the overlapping group lasso:
#below, the group and l1 penalties given equal weights alpha=0.5
grouping=c(list(as.integer(1),2:10,11:30,11:50),as.list(2:50))
penaltyFactor=c(0,rep(0.5,3),rep(0.5,49))
#fitting is slow unless a relaxed optimization tolerance is used
fit_sgl=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor,tol=10^-5)
fit_sgl=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor,tol=10^-12)
fit_sgl=fit_bcd(X=X,y=y_gaussian,family="gaussian",groups=grouping,penaltyFactor=penaltyFactor,tol=10^-12)
library(implicit)
devtools::install_git("https://github.com/stephenberg/implicit")
devtools::install_git("https://github.com/stephenberg/implicit")
devtools::document()
devtools::document()
